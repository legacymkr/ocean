# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

## Scratchpad


# Astroqua – Development Steps (Website + Admin Dashboard)

## Phase 0 — Foundations
- [X] Initialize Next.js 15 + TypeScript in existing repo; ensure App Router enabled
- [X] Configure `eslint`, `prettier`, `tsconfig` path aliases, strict mode
- [X] Install dependencies: shadcn/ui, lucide-react, zod, zustand, recharts, resend, uploadthing, prisma, @prisma/client, pg
- [X] Add `@vercel/postgres` or standard `pg` client for local dev; confirm Postgres connection
- [X] Initialize Prisma; create `.env` with `DATABASE_URL`, `RESEND_API_KEY`, `UPLOADTHING_SECRET`, `UPLOADTHING_APP_ID`
- [X] Set up `shadcn/ui` init; generate base components (button, card, input, textarea, badge, dialog, dropdown, tooltip, sheet, skeleton)

## Phase 1 — Brand & Theming (Bioluminescent Deep-Sea Design)
- [X] Add fonts via `next/font`: Space Grotesk (headlines), Literata (body text)
- [X] Create bioluminescent color palette:
  - [X] Primary Background: Vertical gradient from Dark Teal (#0A2C38) to Ocean Blue (#041923)
  - [X] Primary Accent & Glow: Light Cyan (#3CA8C1) for interactive elements
  - [X] UI Element Background: Semi-transparent Dark Teal (#0A2C38) with backdrop-blur
  - [X] Bubble Animation Color: Translucent Aqua Blue (#1F5C73)
  - [X] Text & Foreground: Soft White (#E3F8FF)
- [X] Configure shadcn theme with bioluminescent palette
- [X] Implement text-glow utilities for Space Grotesk headlines using Light Cyan
- [X] Create floating glassy container utilities with backdrop-blur effects
- [X] Update global layout with abyssal gradient background

## Phase 2 — Core Animations & Utilities
- [X] Build `components/animated-background.tsx`:
  - [X] Bubbles: upward float with varied size/duration; subtle blur; horizontal drift (50 bubbles, 125-225s duration)
  - [X] Randomized properties: size (3-16px), position, delay, horizontal movement
- [X] Build `lib/hooks/use-scroll-reveal.ts` and `components/scroll-reveal.tsx`:
  - [X] IntersectionObserver-based fade-in with translateY animation
  - [X] Accept `delay` prop for staggered reveals (0ms, 200ms, 400ms)
  - [X] Reduce motion respect via `prefers-reduced-motion`
- [X] Apply animations to homepage: float-up on hero, scroll-reveal on cards with staggered delays

## Phase 3 — Storytelling Site (Public)
- [X] Hero section in `src/app/page.tsx` with layered background, headline/subhead glow, bounce ArrowDown
- [X] Timeline section with central vertical line; alternating cards (glass, hover border highlight, image hover scale-105)
- [ ] Article index grid with animated cards, filters (tags/topics), search
- [ ] Article page template: cover image/video, byline, reading progress, glowing pull-quotes, footnotes
- [ ] Reusable CTA bars using secondary accent for AI features
- [ ] SEO: metadata, OpenGraph, social images

## Phase 4 — AI Generator (UX shell, optional backend later)
- [ ] Section scaffolding for AI storyline generator UI (secondary accent)
- [ ] Inputs validated by Zod; client state via Zustand; staged scroll-reveal
- [ ] Placeholder generation flow; hook in real model later (out of scope now)

## Phase 5 — Data Layer & Models
- [ ] Prisma schema: `User`, `Article`, `Tag`, `ArticleTag`, `MediaAsset`, `Role`
  - [ ] `Article`: id, title, slug, excerpt, content (Rich/MD), coverUrl, status (draft/published), publishedAt, authorId
  - [ ] `MediaAsset`: id, url, type, width, height, blurhash, createdById
  - [ ] Roles: admin/editor for dashboard permissions
- [ ] Migrate DB; seed initial admin user and sample tags
- [ ] Add slug generation + unique constraints

## Phase 6 — Uploads & Email
- [ ] Configure Uploadthing routes/policy for images/video; client uploader component
- [ ] Image optimization strategy (Next/Image) + blur placeholders
- [ ] Resend setup: domain + sender; transactional template for “Article Published”
- [ ] Trigger email on publish transition (admin only)

## Phase 7 — Admin Dashboard
- [ ] Route group `src/app/(admin)/admin` with protected layout
- [ ] Auth strategy (minimal): server-protected with middleware; temp password gate or bring in next-auth if needed
- [ ] Dashboard pages: Overview, Articles, Media, Tags, Settings
- [ ] Articles CRUD:
  - [ ] List with filters/sort; inline status; bulk actions
  - [ ] Editor page with title, slug, excerpt, rich content (MDX or tiptap), cover upload, tags, publish toggle
  - [ ] Zod schemas; server actions for create/update/publish
- [ ] Media library with Uploadthing integration
- [ ] Analytics panel using Recharts: views over time (mock or DB), top articles, tags
- [ ] Role-based access control (RBAC) checks on server actions

## Phase 8 — Polish & Performance
- [ ] Motion tuning: durations, easing, stagger consistency
- [ ] Hover/active states for buttons/links with smooth color transitions
- [ ] Lighthouse/Profiler pass; image sizes; font loading (swap); code-splitting where needed
- [ ] a11y: contrast in dark theme, focus rings, reduced motion, semantic landmarks
- [ ] 404/500 pages in-theme

## Phase 9 — Ops & Delivery
- [ ] Env var matrix for local/preview/prod; `.env.example`
- [ ] Vercel deploy; Postgres provisioning; set secrets
- [ ] Prisma migrate on deploy; seed guard
- [ ] Monitoring/logging minimal setup; error boundary UX
- [ ] Release notes and handover docs

## Milestone Review Checklist
- [ ] Foundations installed and working
- [ ] Animations smooth with reduced-motion support
- [ ] Storytelling pages feel immersive and readable
- [ ] Admin can create, upload, tag, and publish articles
- [ ] Emails send on publish; media pipeline stable
- [ ] Analytics render without blocking UI
- [ ] Deployed with correct envs and acceptable performance

